<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="WARN" monitorInterval="30">
	<!--全局属性-->
	<properties>
		<Property name="APP_NAME">edu</Property>
		<Property name="LOG_FILE_PATH">d:/logs/${APP_NAME}</Property>
		<Property name="PATTERN_FORMAT">%d{yyyy-MM-dd HH:mm:ss.SSS} %5level [%t] %class{36} (%L) %M - %msg%xEx%n
		</Property>
		<Property name="LOG_FILE_SIZE_MAX_LIMIT">10 MB</Property>
	</properties>
	
	<Appenders>
		<!--不配置输出到控制台-->
		<Console name="Console" target="SYSTEM_OUT">
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %m%n"/>
		</Console>
		
		
		<!--输出 INFO 到文件 用来定义超过指定大小自动删除旧的创建新的的Appender.-->
		<RollingRandomAccessFile name="RollingInfoFile" fileName="${LOG_FILE_PATH}/info.log"
		             filePattern="${LOG_FILE_PATH}/$${date:yyyyMM}/%d{yyyyMMdd}-info-%i.log">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<Filters>
				<ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
				<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
			
			<PatternLayout>
				<pattern>${PATTERN_FORMAT}</pattern>
			</PatternLayout>
			
			<Policies>
				<!-- rollover on startup, daily and when the file reaches 10 MegaBytes -->
				<OnStartupTriggeringPolicy/>
				<SizeBasedTriggeringPolicy size="${LOG_FILE_SIZE_MAX_LIMIT}"/>
				<TimeBasedTriggeringPolicy/>
			</Policies>
		</RollingRandomAccessFile>
		
		<!--输出警告日志到文件-->
		<RollingRandomAccessFile name="RollingWarnFile" fileName="${LOG_FILE_PATH}/warn.log"
		             filePattern="${LOG_FILE_PATH}/$${date:yyyyMM}/%d{yyyyMMdd}-warn-%i.log">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<Filters>
				<ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
				<ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
			
			<PatternLayout>
				<pattern>${PATTERN_FORMAT}</pattern>
			</PatternLayout>
			
			<Policies>
				<!-- rollover on startup, daily and when the file reaches 10 MegaBytes -->
				<OnStartupTriggeringPolicy/>
				<SizeBasedTriggeringPolicy size="${LOG_FILE_SIZE_MAX_LIMIT}"/>
				<TimeBasedTriggeringPolicy/>
			</Policies>
		</RollingRandomAccessFile>
		
		<!--输出错误日志到文件-->
		<RollingRandomAccessFile name="RollingErrorFile" fileName="${LOG_FILE_PATH}/error.log"
		             filePattern="${LOG_FILE_PATH}/$${date:yyyyMM}/%d{yyyyMMdd}-error-%i.log">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
			
			<PatternLayout>
				<pattern>${PATTERN_FORMAT}</pattern>
			</PatternLayout>
			
			<Policies>
				<!-- rollover on startup, daily and when the file reaches 10 MegaBytes -->
				<OnStartupTriggeringPolicy/>
				<SizeBasedTriggeringPolicy size="${LOG_FILE_SIZE_MAX_LIMIT}"/>
				<TimeBasedTriggeringPolicy/>
			</Policies>
		</RollingRandomAccessFile>
	</Appenders>
	
	<Loggers>
		
		<!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
		<Logger name="org.springframework" level="INFO"/>
		<Logger name="org.mybatis" level="INFO"/>
		<Logger name="org.apache.ibatis" level="INFO"/>
		<logger name="org.apache.ibatis.logging.jdbc.BaseJdbcLogger" additivity="false"/>
		<Logger name="io.netty" level="INFO"/>
		<Logger name="org.hibernate" level="INFO"/>
		
		<!-- LOG "com.luis*" at TRACE level -->
		<Logger name="com.zaxxer" level="INFO"/>
		
		<logger name="druid.sql.Statement" level="info" additivity="false"/>
		<logger name="druid.sql.ResultSet" level="info" additivity="false"/>
		<logger name="com.alibaba.druid" level="info" additivity="false"/>
		
		<!-- LOG everything at INFO level -->
		<Root level="INFO" includeLocation="true">
			<AppenderRef ref="Console"/>
			<AppenderRef ref="RollingInfoFile"/>
			<AppenderRef ref="RollingWarnFile"/>
			<AppenderRef ref="RollingErrorFile"/>
		</Root>
	</Loggers>

</configuration>